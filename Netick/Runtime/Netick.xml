<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Netick</name>
    </assembly>
    <members>
        <member name="M:Netick.NativeUDPSocket.Deinitialize">
            --------------------------------------------------------------------------------------------------------------
            --------------------------------------------------------------------------------------------------------------
            --------------------------------------------------------------------------------------------------------------
            --------------------------------------------------------------------------------------------------------------
        </member>
        <member name="M:Netick.NetickTransport.OnConnectRequest(Netick.NetworkConnectionRequest)">
            -------------------------------
        </member>
        <member name="T:Netick.SequenceId">
            <summary>
            A rolling sequence counter for ordering values. Repeats indefinitely
            with 1022 possible unique values (0 is treated as invalid internally).
            
            Consumes 10 bits when encoded for transmission.
            </summary>
        </member>
        <member name="M:Netick.NotServerException.#ctor">
            <summary>
            Constructs a NotServerException
            </summary>
        </member>
        <member name="M:Netick.NotServerException.#ctor(System.String)">
            <summary>
            Constructs a NotServerException with a message
            </summary>
            <param name="message">The exception message</param>
        </member>
        <member name="M:Netick.NotServerException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a NotServerException with a message and a inner exception
            </summary>
            <param name="message">The exception message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="M:Netick.NotClientException.#ctor">
            <summary>
            Constructs a NotClientException
            </summary>
        </member>
        <member name="M:Netick.NotClientException.#ctor(System.String)">
            <summary>
            Constructs a NotClientException with a message
            </summary>
            <param name="message">The exception message</param>
        </member>
        <member name="M:Netick.NotClientException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a NotClientException with a message and a inner exception
            </summary>
            <param name="message">The exception message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="M:Netick.BadPacketException.#ctor">
            <summary>
            Constructs a BadPacketException
            </summary>
        </member>
        <member name="T:Netick.NetworkPlayerId">
            <summary>
            Represents a networked struct identifier for a <see cref="T:Netick.NetworkPlayer"/>.
            </summary>
        </member>
        <member name="T:Netick.NetworkQueueSnapshot`1">
            <summary>
            A snapshot of the state of a <see cref="T:Netick.NetworkQueue`1"/> collection. Note this must not be used outside the scope of an OnChanged call or a NetworkRender call.
            </summary>
        </member>
        <member name="T:Netick.NetworkQueue`1">
            <summary>
            A networked <see cref="T:System.Collections.Generic.Queue`1"/> collection.
            </summary>
        </member>
        <member name="P:Netick.NetworkQueue`1.Count">
            <summary>
            Gets the number of elements contained in the queue.
            </summary>
        </member>
        <member name="M:Netick.NetworkQueue`1.Clear">
            <summary>
            Removes all elements from the queue.
            </summary>
        </member>
        <member name="M:Netick.NetworkQueue`1.Enqueue(`0)">
            <summary>
            Adds an item to the end of the queue if there is capacity.
            </summary>
            <param name="item">The item to add.</param>
            <returns><c>true</c> if the item was added; otherwise, <c>false</c> if the queue is full.</returns>
        </member>
        <member name="M:Netick.NetworkQueue`1.Dequeue">
            <summary>
            Removes and returns the item at the beginning of the queue.
            </summary>
            <returns>The item removed from the beginning of the queue.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the queue is empty.</exception>
        </member>
        <member name="M:Netick.NetworkQueue`1.TryDequeue(`0@)">
            <summary>
            Attempts to remove and return the item at the beginning of the queue.
            </summary>
            <param name="result">When this method returns, contains the object removed from the queue, or the default value if the queue is empty.</param>
            <returns><c>true</c> if an item was dequeued; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Netick.NetworkQueue`1.Peek">
            <summary>
            Returns the item at the beginning of the queue without removing it.
            </summary>
            <returns>The item at the beginning of the queue.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the queue is empty.</exception>
        </member>
        <member name="M:Netick.NetworkQueue`1.TryPeek(`0@)">
            <summary>
            Attempts to return the item at the beginning of the queue without removing it.
            </summary>
            <param name="result">When this method returns, contains the object at the beginning of the queue, or the default value if the queue is empty.</param>
            <returns><c>true</c> if an item was found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Netick.NetworkQueue`1.Add(`0)">
            <summary>
            Adds an item to the underlying original queue. Used for local operations.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="P:Netick.AdaptiveRemoteInterpolation.CurrentBufferTime">
            <summary>
            Interpolation time in seconds.
            </summary>
        </member>
        <member name="P:Netick.AdaptiveRemoteInterpolation.Time">
            <summary>
            Time in seconds.
            </summary>
        </member>
        <member name="T:Netick.Interpolator">
            <summary>
            A struct that is used to obtain interpolation data for a network variable. 
            </summary>
        </member>
        <member name="M:Netick.Interpolator.GetInterpolationData``1(Netick.InterpolationSource,``0@,``0@,System.Single@)">
            <summary>
            Tries to obtain interpolation data for this frame.
            </summary>
            <returns>Returns true if there was interpolation data for this frame.</returns>
        </member>
        <member name="M:Netick.Interpolator.GetInterpolationData``1(Netick.InterpolationSource,System.Int32,``0@,``0@,System.Single@)">
            <summary>
            Tries to obtain interpolation data for this frame. This is the array version.
            </summary>
            <returns>Returns true if there was interpolation data for this frame.</returns>
        </member>
        <member name="T:Netick.Interpolation">
            <summary>
            A class representing an abstract interpolation interface, which is implemented by <see cref="T:Netick.RemoteInterpolation"/> and <see cref="T:Netick.LocalInterpolation"/>
            </summary>
        </member>
        <member name="T:Netick.LocalInterpolation">
            <summary>
            A class representing the local interpolation of this instance <see cref="T:Netick.NetickEngine"/>. This should be used whenever you want to use Predicted Timeline on the client.
            </summary>
        </member>
        <member name="P:Netick.LocalInterpolation.Time">
            <summary>
            Time in seconds.
            </summary>
        </member>
        <member name="T:Netick.RemoteInterpolation">
            <summary>
            A class representing the remote interpolation of this instance <see cref="T:Netick.NetickEngine"/>. This should be used whenever you want to use Remote Timeline on the client.
            </summary>
        </member>
        <member name="P:Netick.RemoteInterpolation.CurrentBufferTime">
            <summary>
            Interpolation time in seconds.
            </summary>
        </member>
        <member name="P:Netick.RemoteInterpolation.Time">
            <summary>
            Time in seconds.
            </summary>
        </member>
        <member name="P:Netick.OnChangedData.InvokedForMisprediction">
            <summary>
            Returns true if this OnChanged callback is due to a mismatch between the state of this variable before rollback, and the state after rollback and resimulation.
            </summary>
        </member>
        <member name="M:Netick.OnChangedData.GetPreviousNetworkDictionary``2(Netick.NetworkDictionary{``0,``1})">
            <summary>
            Gets a snapshot of the previous state of a NetworkDictionary collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netick.OnChangedData.GetPreviousNetworkHashSet``1(Netick.NetworkHashSet{``0})">
            <summary>
            Gets a snapshot of the previous state of a NetworkHashSet collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netick.OnChangedData.GetPreviousNetworkLinkedList``1(Netick.NetworkLinkedList{``0})">
            <summary>
            Gets a snapshot of the previous state of a NetworkLinkedList collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netick.OnChangedData.GetPreviousNetworkUnorderedList``1(Netick.NetworkUnorderedList{``0})">
            <summary>
            Gets a snapshot of the previous state of a NetworkUnorderedList collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netick.OnChangedData.GetPreviousNetworkQueue``1(Netick.NetworkQueue{``0})">
            <summary>
            Gets a snapshot of the previous state of a NetworkQueue collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netick.OnChangedData.GetPreviousNetworkStack``1(Netick.NetworkStack{``0})">
            <summary>
            Gets a snapshot of the previous state of a NetworkStack collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netick.OnChangedData.GetPreviousValue``1">
            <summary>
            Gets previous value for the changed network property. 
            <para>Note: this must only be used with non-array network properties. For arrays, use <see cref="M:Netick.OnChangedData.GetArrayPreviousElementValue``1(System.Int32)"/> instead. </para>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Netick.OnChangedData.GetPreviousValueAsPointer">
            <summary>
            Gets a pointer to the previous value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netick.OnChangedData.GetArrayChangedElementIndex">
            <summary>
            Gets the index of the changed element of the array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netick.OnChangedData.GetArrayPreviousElementValue``1(System.Int32)">
            <summary>
            Gets the value of the changed element of the array. This is an unsafe method, use it carefully and make sure to never go outside range to avoid a crash.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netick.OnChangedData.GetArrayPreviousElementValue``1">
            <summary>
            Gets the index of the changed element of the array.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Netick.NetworkDictionarySnapshot`2">
            <summary>
            A snapshot of the state of a <see cref="T:Netick.NetworkDictionary`2"/> collection. Note this must not be used outside the scope of an OnChanged call or a NetworkRender call.
            </summary>
        </member>
        <member name="M:Netick.NetworkDictionarySnapshot`2.ContainsKey(`0)">
            <summary>
            Determines whether the dictionary contains the specified key.
            </summary>
            <param name="key">The key to locate in the dictionary.</param>
            <returns>true if the dictionary contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:Netick.NetworkDictionarySnapshot`2.ContainsValue(`1)">
            <summary>
            Determines whether the dictionary contains a specific value.
            </summary>
            <param name="value">The value to locate in the dictionary.</param>
            <returns>true if the value is found; otherwise, false.</returns>
        </member>
        <member name="T:Netick.NetworkDictionary`2">
            <summary>
            A networked <see cref="T:System.Collections.Generic.Dictionary`2"/> collection.
            </summary>
        </member>
        <member name="M:Netick.NetworkDictionary`2.Clear">
            <summary>
            Removes all keys and values from the dictionary.
            </summary>
        </member>
        <member name="P:Netick.NetworkDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get or set.</param>
            <returns>The value associated with the specified key.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when the key does not exist in the dictionary.</exception>
        </member>
        <member name="P:Netick.NetworkDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the dictionary.
            </summary>
        </member>
        <member name="M:Netick.NetworkDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add.</param>
            <returns>true if the key/value pair was added; false if the key already exists or the dictionary is full.</returns>
        </member>
        <member name="M:Netick.NetworkDictionary`2.Remove(`0)">
            <summary>
            Removes the value with the specified key from the dictionary.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>true if the element is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:Netick.NetworkDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter.</param>
            <returns>true if the key was found; otherwise, false.</returns>
        </member>
        <member name="M:Netick.NetworkDictionary`2.SetKeyValue(`0,`1)">
            <summary>
            Sets the value associated with the specified key if it exists in the dictionary.
            If the key is found, updates its value.
            </summary>
            <returns>true if the key was found and updated; otherwise, false</returns>
        </member>
        <member name="M:Netick.NetworkDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the dictionary contains the specified key.
            </summary>
            <param name="key">The key to locate in the dictionary.</param>
            <returns>true if the dictionary contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:Netick.NetworkDictionary`2.ContainsValue(`1)">
            <summary>
            Determines whether the dictionary contains a specific value.
            </summary>
            <param name="value">The value to locate in the dictionary.</param>
            <returns>true if the value is found; otherwise, false.</returns>
        </member>
        <member name="T:Netick.InterestManagementGroup">
            <summary>
            Represents a group used for interest management in the Netick.
            An InterestManagementGroup contains a collection of entities and manages which clients are interested in those entities,
            typically for the purpose of optimizing network traffic by only sending relevant updates to clients.
            </summary>
        </member>
        <member name="T:Netick.Networked">
             <summary>
             Use this attribute on a property to make it networked. It will be synchronized across the network.
            <para> * Use the parameter "size" to specify the max capacity of a network array/collection.</para>
            <para> * Use the parameter "relevancy" to specify who will receive this variable.</para>
            <para> * Use the parameter "precision" to specify the precision of a float-based variable.</para>
            <para> * Use the parameter "ensureSafety" to specify if it will always be safe to access this variable (for instance, when Netick is not running).</para>
             </summary>
        </member>
        <member name="T:Netick.OnChanged">
            <summary>
            Use this attribute on a method you want to call when a specific property value changes. Example: [OnChanged(nameof(PropertyName)]
            </summary>
        </member>
        <member name="T:Netick.Rpc">
             <summary>
             Use this attribute on any method you want to make an RPC. Must have the return type of void.
            <para> * Use the parameter "source" to specify who is allowed to send this RPC.</para>
            <para> * Use the parameter "target" to specify who is allowed to receive and execute this RPC.</para>
            <para> * Use the parameter "isReliable" to specify if this Rpc should be reliable or not, meaning it won't be lost (due to packet loss).</para>
            <para> * Use the parameter "localInvoke" to specify if this Rpc should be executed on the machine it was called from.</para>
             </summary>
        </member>
        <member name="T:Netick.NetworkTimer">
            <summary>
            A helper struct that can be used to as a timer for various gameplay purposes.
            </summary>
        </member>
        <member name="T:Netick.NetworkHashSetSnapshot`1">
            <summary>
            A snapshot of the state of a <see cref="T:Netick.NetworkHashSet`1"/> collection. Note this must not be used outside the scope of an OnChanged call or a NetworkRender call.
            </summary>
        </member>
        <member name="M:Netick.NetworkHashSetSnapshot`1.Contains(`0)">
            <summary>
            Determines whether the hashset snapshot contains a specific value.
            </summary>
            <param name="item">The object to locate in the snapshot.</param>
            <returns>true if item is found; otherwise, false.</returns>
        </member>
        <member name="T:Netick.NetworkHashSet`1">
            <summary>
            A networked <see cref="T:System.Collections.Generic.HashSet`1"/> collection.
            </summary>
        </member>
        <member name="P:Netick.NetworkHashSet`1.Count">
            <summary>
            Gets the number of elements contained in the set.
            </summary>
        </member>
        <member name="M:Netick.NetworkHashSet`1.Add(`0)">
            <summary>
            Adds an item to the set.
            </summary>
            <param name="item">The element to add.</param>
            <returns>true if the element is added to the set; false if the element is already present or the set was full.</returns>
        </member>
        <member name="M:Netick.NetworkHashSet`1.Remove(`0)">
            <summary>
            Removes the specified item from the set.
            </summary>
            <param name="item">The element to remove.</param>
            <returns>true if the element is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:Netick.NetworkHashSet`1.Contains(`0)">
            <summary>
            Determines whether the set contains a specific value.
            </summary>
            <param name="item">The object to locate in the set.</param>
            <returns>true if item is found; otherwise, false.</returns>
        </member>
        <member name="M:Netick.NetworkHashSet`1.Clear">
            <summary>
            Removes all item from the set.
            </summary>
        </member>
        <member name="T:Netick.NetworkStackSnapshot`1">
            <summary>
            A snapshot of the state of a <see cref="T:Netick.NetworkStack`1"/> collection. Note this must not be used outside the scope of an OnChanged call or a NetworkRender call.
            </summary>
        </member>
        <member name="P:Netick.NetworkStackSnapshot`1.Count">
            <summary>
            Gets the number of elements in the stack.
            </summary>
        </member>
        <member name="T:Netick.NetworkStack`1">
            <summary>
            A networked <see cref="T:System.Collections.Generic.Stack`1"/> collection.
            </summary>
        </member>
        <member name="P:Netick.NetworkStack`1.Count">
            <summary>
            Gets the number of items contained in the stack.
            </summary>
        </member>
        <member name="M:Netick.NetworkStack`1.Clear">
            <summary>
            Removes all items from the stack.
            </summary>
        </member>
        <member name="M:Netick.NetworkStack`1.Push(`0)">
            <summary>
            Pushes an item onto the top of the stack.
            </summary>
            <param name="item">The item to push onto the stack.</param>
            <returns>True if the item was pushed; false if the stack is full.</returns>
        </member>
        <member name="M:Netick.NetworkStack`1.Pop">
            <summary>
            Removes and returns the item at the top of the stack.
            </summary>
            <returns>The item removed from the top of the stack, or default if the stack is empty.</returns>
        </member>
        <member name="M:Netick.NetworkStack`1.TryPop(`0@)">
            <summary>
            Attempts to remove and return the item at the top of the stack.
            </summary>
            <param name="result">The item removed from the top of the stack, or default if the stack is empty.</param>
            <returns>True if an item was removed; otherwise, false.</returns>
        </member>
        <member name="M:Netick.NetworkStack`1.Peek">
            <summary>
            Returns the item at the top of the stack without removing it.
            </summary>
            <returns>The item at the top of the stack, or default if the stack is empty.</returns>
        </member>
        <member name="M:Netick.NetworkStack`1.TryPeek(`0@)">
            <summary>
            Attempts to return the item at the top of the stack without removing it.
            </summary>
            <param name="result">The item at the top of the stack, or default if the stack is empty.</param>
            <returns>True if an item was returned; otherwise, false.</returns>
        </member>
        <member name="M:Netick.NetworkStack`1.Add(`0)">
            <summary>
            Adds an item to the original stack (used for internal state).
            </summary>
            <param name="item">The element to add.</param>
        </member>
        <member name="T:Netick.NetworkLinkedListSnapshot`1">
            <summary>
            A snapshot of the state of a <see cref="T:Netick.NetworkLinkedList`1"/> collection. Note this must not be used outside the scope of an OnChanged call or a NetworkRender call.
            </summary>
        </member>
        <member name="P:Netick.NetworkLinkedListSnapshot`1.Head">
            <summary>
            Gets the first node in the linked list snapshot.
            </summary>
        </member>
        <member name="P:Netick.NetworkLinkedListSnapshot`1.Tail">
            <summary>
            Gets the last node in the linked list snapshot.
            </summary>
        </member>
        <member name="M:Netick.NetworkLinkedListSnapshot`1.GetNode(System.Int32)">
            <summary>
            Gets the node at the specified index in the snapshot.
            </summary>
        </member>
        <member name="F:Netick.NetworkLinkedListNode`1.Index">
            <summary>
            Index of this node within the collection.
            </summary>
        </member>
        <member name="F:Netick.NetworkLinkedListNode`1.Next">
            <summary>
            Index of the next node.
            </summary>
        </member>
        <member name="F:Netick.NetworkLinkedListNode`1.Previous">
            <summary>
            Index of the previous node.
            </summary>
        </member>
        <member name="T:Netick.NetworkLinkedList`1">
            <summary>
            A networked linked list collection. This is an ordered list meaning that the elements insertion order is maintained when iterating through the collection.
            </summary>
        </member>
        <member name="P:Netick.NetworkLinkedList`1.Head">
            <summary>
            Gets the first node in the linked list.
            </summary>
        </member>
        <member name="P:Netick.NetworkLinkedList`1.Tail">
            <summary>
            Gets the last node in the linked list.
            </summary>
        </member>
        <member name="P:Netick.NetworkLinkedList`1.Count">
            <summary>
            Gets the number of items contained in the linked list.
            </summary>
        </member>
        <member name="M:Netick.NetworkLinkedList`1.Add(`0)">
            <summary>
            Adds an item to the end of the linked list.
            </summary>
            <param name="item">The item to add.</param>
            <returns>True if the item was added; otherwise, false.</returns>
        </member>
        <member name="M:Netick.NetworkLinkedList`1.AddFirst(`0,Netick.NetworkLinkedListNode{`0}@)">
            <summary>
            Adds an item as the first node in the linked list.
            </summary>
            <param name="item">The item to add.</param>
            <param name="addedNode">The node that was added.</param>
            <returns>True if the item was added; otherwise, false.</returns>
        </member>
        <member name="M:Netick.NetworkLinkedList`1.AddLast(`0,Netick.NetworkLinkedListNode{`0}@)">
            <summary>
            Adds an item as the last node in the linked list.
            </summary>
            <param name="item">The item to add.</param>
            <param name="addedNode">The node that was added.</param>
            <returns>True if the item was added; otherwise, false.</returns>
        </member>
        <member name="M:Netick.NetworkLinkedList`1.AddBefore(Netick.NetworkLinkedListNode{`0},`0,Netick.NetworkLinkedListNode{`0}@)">
            <summary>
            Adds an item before the specified node in the linked list.
            </summary>
            <param name="beforeThisNode">The node before which to insert the new item.</param>
            <param name="item">The item to add.</param>
            <param name="addedNode">The node that was added.</param>
            <returns>True if the item was added; otherwise, false.</returns>
        </member>
        <member name="M:Netick.NetworkLinkedList`1.AddAfter(Netick.NetworkLinkedListNode{`0},`0,Netick.NetworkLinkedListNode{`0}@)">
            <summary>
            Adds an item after the specified node in the linked list.
            </summary>
            <param name="afterThisNode">The node after which to insert the new item.</param>
            <param name="item">The item to add.</param>
            <param name="addedNode">The node that was added.</param>
            <returns>True if the item was added; otherwise, false.</returns>
        </member>
        <member name="M:Netick.NetworkLinkedList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of the specified item from the linked list.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>True if the item was removed; otherwise, false.</returns>
        </member>
        <member name="M:Netick.NetworkLinkedList`1.Remove(Netick.NetworkLinkedListNode{`0})">
            <summary>
            Removes the specified node from the linked list.
            </summary>
            <param name="node">The node to remove.</param>
            <returns>True if the node was removed; otherwise, false.</returns>
        </member>
        <member name="M:Netick.NetworkLinkedList`1.Clear">
            <summary>
            Removes all items from the linked list.
            </summary>
        </member>
        <member name="P:Netick.NetworkLinkedList`1.Nodes">
            <summary>
            Gets an enumerable collection of all nodes in the linked list.
            </summary>
        </member>
        <member name="T:Netick.NetickEngine">
            <summary>
            The NetickEngine class is the core of Netick, managing networking, simulation, interpolation, replication, etc.
            </summary>
        </member>
        <member name="P:Netick.NetickEngine.ConnectedClients">
            <summary>
            A list containing all connected clients currently.
            <para>Note: if you want the clients + the server, use <see cref="P:Netick.NetickEngine.ConnectedPlayers"/>.</para>
            </summary>
        </member>
        <member name="P:Netick.NetickEngine.ConnectedPlayers">
            <summary>
            <para>A list containing all connected clients currently, in addition to the server.</para>
            <para>Note: if you only want the clients, use <see cref="P:Netick.NetickEngine.ConnectedClients"/>.</para>
            </summary>
        </member>
        <member name="P:Netick.NetickEngine.ServerEndPoint">
            <summary>
            <c><b>[Client Only]</b></c> The <see cref="T:System.Net.IPEndPoint"/> of the server you are connected to. Returns null if you are not connected to any server, or if you are the server.
            </summary>
        </member>
        <member name="P:Netick.NetickEngine.IsConnected">
            <summary>
            <c><b>[Client Only]</b></c> Returns true if this client is currently connected to a server.
            </summary>
        </member>
        <member name="P:Netick.NetickEngine.FixedDeltaTime">
            <summary>
            Time period between simulation ticks.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Netick.NetickEngine.Tick" -->
        <member name="P:Netick.NetickEngine.IsResimulating">
            <summary>
            Returns true if we are currently resimulating a previous input/tick of the past. On the server, it always returns false since <b>only the clients resimulate</b>.
            </summary>
        </member>
        <member name="P:Netick.NetickEngine.InKBps">
            <summary>
            Incoming data in kilobytes per second (KBps).
            </summary>
        </member>
        <member name="P:Netick.NetickEngine.OutKBps">
            <summary>
            Outgoing data in kilobytes per second (KBps).
            </summary>
        </member>
        <member name="P:Netick.NetickEngine.InPacketLoss">
            <summary>
            <c><b>[Client Only]</b></c> Estimation of incoming packets that are being lost. Value ranges between 0.0 and 1.0, with 1.0 meaning all packets are being lost.
            </summary>
        </member>
        <member name="P:Netick.NetickEngine.OutPacketLoss">
            <summary>
            <c><b>[Client Only]</b></c> Estimation of outgoing packets that are being lost. Value ranges between 0.0 and 1.0, with 1.0 meaning all packets are being lost.
            </summary>
        </member>
        <member name="P:Netick.NetickEngine.InterpolationDelay">
            <summary>
            <c><b>[Client Only]</b></c> Interpolation delay in seconds.
            </summary>
        </member>
        <member name="P:Netick.NetickEngine.RTT">
            <summary>
            <c><b>[Client Only]</b></c> The round-trip time (RTT) of the client in seconds.
            </summary>
        </member>
        <member name="M:Netick.NetickEngine.DisconnectFromServer">
            <summary>
            <c><b>[Client Only]</b></c> Disconnects this client from the server.
            </summary>
        </member>
        <member name="M:Netick.NetickEngine.GetWorldStateTotalSize">
            <summary>
            Returns the size of the entirety of the game's networked state snapshot size, in bytes. This includes the sizes of all allocated blocks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netick.NetickEngine.AttachBehaviour(Netick.INetickScript,System.Boolean)">
            <summary>
            Attaches a <see cref="T:Netick.INetickScript"/> to the simulation.
            </summary>
        </member>
        <member name="M:Netick.NetickEngine.DetachBehaviour(Netick.INetickScript)">
            <summary>
            Detaches a <see cref="T:Netick.INetickScript"/> from the simulation.
            </summary>
        </member>
        <member name="M:Netick.NetickEngine.Update(System.Single,System.Single)">
            <summary>
            Updates Netick logic. 
            </summary>
        </member>
        <member name="M:Netick.NetickEngine.Render">
            <summary>
            Call this to invoke NetworkRender on simulated entities. This might not be needed if you are running a headless build.
            </summary>
        </member>
        <member name="T:Netick.NetworkPlayer">
            <summary>
            Represents a network player, which can be either a local player (representing this player) or a remote connection (representing a connected client)).
            </summary>
        </member>
        <member name="P:Netick.NetworkPlayer.PlayerId">
            <summary>
            The networked index of this player. 
            <para>Note: it returns -1 on the client for the local player when not connected to a server.</para>
            <para>Note: the server player always has Id 0.</para>
            </summary>
        </member>
        <member name="P:Netick.NetworkPlayer.PlayerObject">
            <summary>
            Use this to associate an object with this player. This is a local variable that is not synced.
            </summary>
        </member>
        <member name="T:Netick.Tick">
            <summary>
            Represents a network tick.
            </summary>
        </member>
        <member name="M:Netick.IGameEngine.GetConnectionMetaSizeWords">
            <summary>
            Implements this to inform Netick about the size (in 32 bit words) of your connection meta data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netick.IGameEngine.GetEntityMetaSizeWords">
            <summary>
            Implements this to inform Netick about the size (in 32 bit words) of your entity meta data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netick.IGameEngine.OnEntitySpawned(Netick.Entity)">
            <summary>
            This is called when a new entity has been added to the simulation.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Netick.IGameEngine.OnEntityDespawned(Netick.Entity)">
            <summary>
            This is called when an entity has been removed from the simulation.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Netick.IGameEngine.OnUnlinkedEntityDespawned(Netick.Entity)">
            <summary>
            This is called when an unliked entity has been removed from the simulation.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Netick.IGameEngine.PopulateEntityMeta(Netick.Entity)">
            <summary>
            This is used to populate the user meta data for an entity.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Netick.IGameEngine.OnEntityMetaChanged(Netick.NetickEntityMeta,System.Byte*,System.Int32)">
            <summary>
            This method is called on the client when it receives new entity meta data. This must be used to create/setup network entities on the client. It can be called many times not only when the data has changed.
            <para>Note: user entity meta data can be used for custom user data that might be used in creating entities.</para>
            </summary>
            <param name="netickMeta"></param>
            <param name="userMetaData"></param>
        </member>
        <member name="M:Netick.IGameEngine.OnBeforeSend(Netick.NetworkConnection)">
            <summary>
            This is called before sending packets to the target connection.
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Netick.IGameEngine.OnPacketReceived(Netick.NetworkConnection)">
            <summary>
            This is called when a full packet has been received.
            </summary>
            <param name="source"></param>
        </member>
        <member name="T:Netick.INetickScript">
            <summary>
            A script which can be added to Netick internal simulation loop.
            </summary>
        </member>
        <member name="M:Netick.INetickScript.Initialize(Netick.NetickEngine)">
            <summary>
            Used to initialize the user script and assign Engine.
            </summary>
            <param name="netickEngine"></param>
        </member>
        <member name="M:Netick.INetickScript.NetworkStart">
            <summary>
            Called when this script has been added to the simulation. 
            </summary>
        </member>
        <member name="M:Netick.INetickScript.NetworkDestroy">
            <summary>
            Called when this script has been removed from the simulation.
            </summary>
        </member>
        <member name="M:Netick.INetickScript.NetworkUpdate">
            <summary>
            Called every frame. Executed before NetworkFixedUpdate.
            </summary>
        </member>
        <member name="M:Netick.INetickScript.NetworkFixedUpdate">
            <summary>
            Called every fixed-time network update/tick. Any changes/updates to the network state must happen here.
            <para>On the client, if you are the Input Source or if this Entity.PredictionMode is set to Global, it will be called several times in one update/tick during resimulations. To check for resimulations, use [<see cref="P:Netick.Entity.IsResimulating"/>].</para> 
            </summary>
        </member>
        <member name="M:Netick.INetickScript.NetworkRender">
            <summary>
            Called every frame. Executed after NetworkUpdate and NetworkFixedUpdate.
            </summary>
        </member>
        <member name="T:Netick.INetickNetworkScript">
            <summary>
            A script which can have networked properties and rpcs.
            </summary>
        </member>
        <member name="M:Netick.INetickEntity.Initialize(Netick.NetickEngine,Netick.Entity)">
            <summary>
            Used to initialize the user entity and assign Engine and Entity.
            </summary>
            <param name="netickEngine"></param>
            <param name="entity"></param>
        </member>
        <member name="T:Netick.NetworkUnorderedListSnapshot`1">
            <summary>
            A snapshot of the state of a <see cref="T:Netick.NetworkUnorderedList`1"/> collection. Note this must not be used outside the scope of an OnChanged call or a NetworkRender call.
            </summary>
        </member>
        <member name="T:Netick.NetworkUnorderedList`1">
            <summary>
            A networked list collection. This is an unordered list meaning that the order of the elements during iteration is undefined.
            </summary>
        </member>
        <member name="P:Netick.NetworkUnorderedList`1.Count">
            <summary>
            Gets the number of items contained in the list.
            </summary>
        </member>
        <member name="M:Netick.NetworkUnorderedList`1.Clear">
            <summary>
            Removes all elements from the list.
            </summary>
        </member>
        <member name="M:Netick.NetworkUnorderedList`1.Add(`0)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="item">The item to add.</param>
            <returns>True if the item was added; otherwise, false.</returns>
        </member>
        <member name="M:Netick.NetworkUnorderedList`1.Remove(`0)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="item">The item to add.</param>
            <returns>True if the item was removed; otherwise, false.</returns>
        </member>
        <member name="T:Netick.InterestManagement">
            <summary>
            Manages interest groups and area of interest (AoI) layers.
            </summary>
        </member>
        <member name="T:Netick.RpcContext">
            <summary>
            Contains information about an RPC call.
            </summary>
        </member>
        <member name="F:Netick.RpcContext.Source">
            <summary>
            The source of this RPC call (the player that originally called it).
            </summary>
        </member>
        <member name="M:Netick.NetworkRpc.InternalIsResim(Netick.NetickEngine)">
            <summary>
            Internal method. Never call this.
            </summary>
        </member>
        <member name="M:Netick.NetworkRpc.InternalCreateRpc(Netick.NetickEngine,System.Boolean,Netick.NetworkPlayerId,System.Int32,Netick.INetickNetworkScript,System.Boolean,Netick.RpcPeers,System.Int32)">
            <summary>
            Internal method. Never call this.
            </summary>
        </member>
        <member name="M:Netick.NetworkRpc.InternalCanSend(Netick.NetickEngine,Netick.Entity,Netick.RpcPeers,Netick.RpcPeers,System.Int32)">
            <summary>
            Internal method. Never call this.
            </summary>
        </member>
        <member name="M:Netick.NetworkRpc.InternalCanInvokeWithRID(Netick.NetickEngine,Netick.Entity,Netick.RpcPeers,Netick.RpcPeers,System.Boolean,System.Int32,Netick.RpcContext@)">
            <summary>
            Internal method. Never call this.
            </summary>
        </member>
        <member name="T:Netick.NetworkBool">
            <summary>
            Always use NetworkBool instead of bool, for networked properties and RPC parameters.
            </summary>
        </member>
        <member name="F:Netick.CustomizableSocketTransport._connectRequestBuffer">
            ----------------------------------------------------
        </member>
        <member name="P:Netick.NetworkConnection.InPacketLossBurst">
            <summary>
            The longest inward packet loss burst (more than 2 packets lost in a row) in the last 10 seconds.
            </summary>
        </member>
        <member name="P:Netick.NetworkConnection.InPacketLoss">
            <summary>
            Estimation of incoming packets that are being lost. Value ranges between 0.0 and 1.0, with 1.0 meaning all packets are being lost.
            </summary>
        </member>
        <member name="P:Netick.NetworkConnection.OutPacketLoss">
            <summary>
            Estimation of outgoing packets that are being lost. Value ranges between 0.0 and 1.0, with 1.0 meaning all packets are being lost.
            </summary>
        </member>
        <member name="M:Netick.NetworkConnection.SendData(System.Byte,System.Byte*,System.Int32,Netick.TransportDeliveryMethod)">
            <summary>
            Sends data to this connection. 
            <para>Note: the low-level transport must implement <see cref="M:Netick.TransportConnection.SendUserData(System.IntPtr,System.Int32,Netick.TransportDeliveryMethod)"/> for this method to have an effect.</para>
            </summary>
        </member>
        <member name="T:Netick.NetworkString8">
            <summary>
            Represents a fixed-size network-serializable string with a maximum length of 8 characters.
            </summary>
        </member>
        <member name="T:Netick.NetworkString16">
            <summary>
            Represents a fixed-size network-serializable string with a maximum length of 16 characters.
            </summary>
        </member>
        <member name="T:Netick.NetworkString32">
            <summary>
            Represents a fixed-size network-serializable string with a maximum length of 32 characters.
            </summary>
        </member>
        <member name="T:Netick.NetworkString64">
            <summary>
            Represents a fixed-size network-serializable string with a maximum length of 64 characters.
            </summary>
        </member>
        <member name="T:Netick.NetworkString128">
            <summary>
            Represents a fixed-size network-serializable string with a maximum length of 128 characters.
            </summary>
        </member>
        <member name="T:Netick.NetworkString256">
            <summary>
            Represents a fixed-size network-serializable string with a maximum length of 256 characters.
            </summary>
        </member>
    </members>
</doc>
