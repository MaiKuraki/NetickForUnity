<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Netick.Unity</name>
    </assembly>
    <members>
        <member name="M:Netick.Unity.NetworkEventsListener.OnConnectRequest(Netick.Unity.NetworkSandbox,Netick.NetworkConnectionRequest)">
            <summary>
            Called on the server when a client tries to connect. Use <paramref name="request"/> to decide whether or not to allow this client to connect.
            </summary>
            <param name="sandbox"></param>
            <param name="request"></param>
        </member>
        <member name="M:Netick.Unity.NetworkEventsListener.OnConnectFailed(Netick.Unity.NetworkSandbox,Netick.ConnectionFailedReason)">
            <summary>
            Called on the client when the connection to the server was refused, or simply failed.
            </summary>
            <param name="sandbox"></param>
            <param name="reason"></param>
        </member>
        <member name="M:Netick.Unity.NetworkEventsListener.OnInput(Netick.Unity.NetworkSandbox)">
            <summary>
            Called to read inputs.
            </summary>
            <param name="sandbox"></param>
        </member>
        <member name="M:Netick.Unity.NetworkEventsListener.OnStartup(Netick.Unity.NetworkSandbox)">
            <summary>
            Called when Netick has been started.
            </summary>
            <param name="sandbox"></param>
        </member>
        <member name="M:Netick.Unity.NetworkEventsListener.OnShutdown(Netick.Unity.NetworkSandbox)">
            <summary>
            Called when Netick has been shut down.
            </summary>
            <param name="sandbox"></param>
        </member>
        <member name="M:Netick.Unity.NetworkEventsListener.OnVisibilityChanged(Netick.Unity.NetworkSandbox)">
            <summary>
            Called when a sandbox visibility changes. Use Sandbox.IsVisible to find if the sandbox is visible or not.
            </summary>
            <param name="sandbox"></param>
        </member>
        <member name="M:Netick.Unity.NetworkEventsListener.OnSceneOperationBegan(Netick.Unity.NetworkSandbox,Netick.Unity.NetworkSceneOperation)">
            <summary>
            Called on both the client and the server when a scene load/unload operation was started.
            </summary>
            <param name="sandbox"></param>
        </member>
        <member name="M:Netick.Unity.NetworkEventsListener.OnSceneOperationDone(Netick.Unity.NetworkSandbox,Netick.Unity.NetworkSceneOperation)">
            <summary>
            Called on both the client and the server when a scene load/unload operation finished.
            </summary>
            <param name="sandbox"></param>
        </member>
        <member name="M:Netick.Unity.NetworkEventsListener.OnConnectedToServer(Netick.Unity.NetworkSandbox,Netick.NetworkConnection)">
            <summary>
            Called on the client when connection to the server has been initiated.
            </summary>
            <param name="sandbox"></param>
            <param name="server"></param>
        </member>
        <member name="M:Netick.Unity.NetworkEventsListener.OnDisconnectedFromServer(Netick.Unity.NetworkSandbox,Netick.NetworkConnection,Netick.TransportDisconnectReason)">
            <summary>
            Called on the client when connection to the server ended, or when a network error caused the disconnection.
            </summary>
            <param name="sandbox"></param>
            <param name="server"></param>
        </member>
        <member name="M:Netick.Unity.NetworkEventsListener.OnPlayerJoined(Netick.Unity.NetworkSandbox,Netick.NetworkPlayerId)">
            <summary>
            Called on when a specific player has joined the game. This is synced to all clients, including late-joiners..
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkEventsListener.OnPlayerLeft(Netick.Unity.NetworkSandbox,Netick.NetworkPlayerId)">
            <summary>
            Called on when a specific player has left the game. This is synced to all clients, including late-joiners..
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkEventsListener.OnObjectCreated(Netick.Unity.NetworkObject)">
            <summary>
            Called when a network object has been created/initialized. 
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkEventsListener.OnObjectDestroyed(Netick.Unity.NetworkObject)">
            <summary>
            Called when a network object has been destroyed/recycled.
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkEventsListener.OnClientConnected(Netick.Unity.NetworkSandbox,Netick.NetworkConnection)">
            <summary>
            Called on the server when a specific client has connected.
            </summary>
            <param name="sandbox"></param>
            <param name="client"></param>
        </member>
        <member name="M:Netick.Unity.NetworkEventsListener.OnClientDisconnected(Netick.Unity.NetworkSandbox,Netick.NetworkConnection,Netick.TransportDisconnectReason)">
            <summary>
            Called on the server when a specific client has disconnected.
            </summary>
            <param name="sandbox"></param>
            <param name="client"></param>
        </member>
        <member name="M:Netick.Unity.NetworkEventsListener.OnPlayerConnected(Netick.Unity.NetworkSandbox,Netick.NetworkPlayer)">
            <summary>
            Called on the server when a specific player has connected.
            </summary>
            <param name="sandbox"></param>
            <param name="client"></param>
        </member>
        <member name="M:Netick.Unity.NetworkEventsListener.OnPlayerDisconnected(Netick.Unity.NetworkSandbox,Netick.NetworkPlayer,Netick.TransportDisconnectReason)">
            <summary>
            Called on the server when a specific player has disconnected.
            </summary>
            <param name="sandbox"></param>
            <param name="client"></param>
        </member>
        <member name="M:Netick.Unity.NetworkEventsListener.OnSceneLoaded(Netick.Unity.NetworkSandbox)">
            <summary>
            Called on both the client and the server when the scene has been loaded.
            </summary>
            <param name="sandbox"></param>
        </member>
        <member name="M:Netick.Unity.NetworkEventsListener.OnSceneLoadStarted(Netick.Unity.NetworkSandbox)">
            <summary>
            Called on both the client and the server before beginning to load the new scene.
            </summary>
            <param name="sandbox"></param>
        </member>
        <member name="T:Netick.Unity.NetworkSandbox">
            <summary>
            NetworkSandbox represents a networked game instance in Netick. It encapsulates the entire simulation state for that instance.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.InputEnabled">
            <summary>
            Returns true if input is enabled on this sandbox. Use this to enable/disable input at runtime.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.IsVisible">
            <summary>
            Returns true if this sandbox is visible. Use this to enable/disable visibility at runtime.
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.AttachBehaviour(Netick.Unity.NetickBehaviour)">
            <summary>
            Attaches a <see cref="T:Netick.Unity.NetickBehaviour"/> to the simulation.
            </summary>
            <param name="behaviour"></param>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.DetachBehaviour(Netick.Unity.NetickBehaviour)">
            <summary>
            Detaches a <see cref="T:Netick.Unity.NetickBehaviour"/> from the simulation.
            </summary>
            <param name="behaviour"></param>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.Instantiate(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Instantiates a prefab. This must be called instead of <see cref="M:UnityEngine.Object.Instantiate(UnityEngine.Object)"/> or its variations. 
            <para>Note: this must be called only for non-networked prefabs. If you want to instantiate a network prefab, use <see cref="M:Netick.Unity.NetworkSandbox.NetworkInstantiate(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion,Netick.NetworkPlayer)"/> instead.</para>
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.GetPlayerObject(Netick.NetworkPlayer)">
            <summary>
            Gets the the associated NetworkObject (player object) with this player.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.GetPlayerObject``1(Netick.NetworkPlayer)">
            <summary>
            Gets the the associated script (player object) of type <see cref="!:T"/> with this player.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.TryGetPlayerObject(Netick.NetworkPlayer,Netick.Unity.NetworkObject@)">
            <summary>
            Tries to get the the associated NetworkObject (player object) with this player.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.TryGetPlayerObject``1(Netick.NetworkPlayer,``0@)">
            <summary>
            Tries to get the the associated script (player object) of type <see cref="!:T"/> with this player.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.GetPlayerObject(Netick.NetworkPlayerId)">
            <summary>
            Gets the the associated NetworkObject (player object) with this player.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.GetPlayerObject``1(Netick.NetworkPlayerId)">
            <summary>
            Gets the the associated script (player object) of type <see cref="!:T"/> with this player.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.TryGetPlayerObject(Netick.NetworkPlayerId,Netick.Unity.NetworkObject@)">
            <summary>
            Tries to get the the associated NetworkObject (player object) with this player.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.TryGetPlayerObject``1(Netick.NetworkPlayerId,``0@)">
            <summary>
            Tries to get the the associated script (player object) of type <see cref="!:T"/> with this player.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.SetPlayerObject(Netick.NetworkPlayerId,Netick.Unity.NetworkObject)">
            <summary>
            <i><b>[Server Only]</b></i> Sets the the associated NetworkObject (player object) with this player.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.GetLocalPlayerObject">
            <summary>
            Gets the the associated <see cref="T:Netick.Unity.NetworkObject"/> (player object) with the local player.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.GetLocalPlayerObject``1">
            <summary>
            Gets the the associated script (player object) of type <see cref="!:T"/> with the local player.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.TryGetLocalPlayerObject(Netick.Unity.NetworkObject@)">
            <summary>
            Tries to get the the associated <see cref="T:Netick.Unity.NetworkObject"/> (player object) with the local player.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.TryGetLocalPlayerObject``1(``0@)">
            <summary>
            Tries to get the the associated script (player object) of type <see cref="!:T"/> with the local player.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.GetPlayerById(Netick.NetworkPlayerId)">
            <summary>
            Retrieves the <see cref="T:Netick.NetworkPlayer"/> associated with the given <see cref="T:Netick.NetworkPlayerId"/>.
            <para>
            On the server, this method can return any player by their ID. On the client, it only returns the local player or the server player.
            </para>
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.ContainsPlayer(Netick.NetworkPlayerId)">
            <summary>
            Checks if a player with the specified <see cref="T:Netick.NetworkPlayerId"/> exists in the simulation.
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.GetObject(System.Int32)">
            <summary>
            Gets the <see cref="T:Netick.Unity.NetworkObject"/> with the specified id. Returns null in case no object with that id exists.
            </summary>
            <param name="id"> The id of the <see cref="T:Netick.Unity.NetworkObject"/></param>
            <returns></returns>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.TryGetObject(System.Int32,Netick.Unity.NetworkObject@)">
            <summary>
            Tries to get the <see cref="T:Netick.Unity.NetworkObject"/> with the specified id.
            </summary>
            <param name="id"> The id of the <see cref="T:Netick.Unity.NetworkObject"/></param>
            <returns></returns>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.TryGetBehaviour``1(System.Int32,``0@)">
            <summary>
            Tries to get the <see cref="T:Netick.Unity.NetworkBehaviour"/> of a <see cref="T:Netick.Unity.NetworkObject"/> with the specified id.
            </summary>
            <param name="id"> The id of the network object</param>
            <returns></returns>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.GetBehavioursOfType``1(System.Collections.Generic.List{``0})">
            <summary>
            Gets all network behaviours (or Netick behaviours) in the simulation that have the type of <see cref="!:T"/>.
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.GetBehavioursOfType``1">
            <summary>
            Gets all network behaviours (or Netick behaviours) in the simulation that have the type of <see cref="!:T"/>.
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.GetInput``1(System.Int32)">
            <summary>
            Gets a specific input for the next tick.
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.SetInput``1(``0,System.Int32)">
            <summary>
            Sets a specific input for the next tick.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.TickToTime(Netick.Tick)">
            <summary>
            Converts ticks to time in seconds.
            </summary>
            <param name="tick"></param>
            <returns></returns>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.TickToTime(System.Single)">
            <summary>
            Converts ticks to time in seconds.
            </summary>
            <param name="tick"></param>
            <returns></returns>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.TimeToTick(System.Single)">
            <summary>
            Converts time (in seconds) to ticks.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.ConnectedClients">
            ****************************************************** Deprecated ******************************************************
            <summary>
            A list containing all connected clients currently.
            <para>Note: if you want the clients + the server, use <see cref="P:Netick.Unity.NetworkSandbox.ConnectedPlayers"/>.</para>
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.ConnectedPlayers">
            <summary>
            <para>A list containing all connected clients currently, in addition to the server (when started as a host).</para>
            <para>Note: if you only want the clients, use <see cref="P:Netick.Unity.NetworkSandbox.ConnectedClients"/>.</para>
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.CurrentRpcSource">
            <summary>
            Always always returns null except when called inside the body of an RPC method, it returns the <see cref="T:Netick.NetworkConnection"/> we are executing RPCs from.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.CurrentRpcCaller">
            <summary>
            Always always returns null except when called inside the body of an RPC method, it returns the <see cref="T:Netick.NetworkPlayer"/> we are executing RPCs from. Works the same as <see cref="P:Netick.Unity.NetworkSandbox.CurrentRpcSource"/>, except when the RPC is called by the local player, it returns <see cref="!:Sandbox.LocalPlayer"/>.
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.InitializePool(UnityEngine.GameObject,System.Int32,System.Boolean)">
            <summary>
            Initializes the pool for the specified prefab. After this method has been called for a certain prefab, all instances of that prefab will be recycled and reset when created/destroyed.
            <para>Note: this method should only be called on <see cref="M:Netick.Unity.NetworkEventsListener.OnStartup(Netick.Unity.NetworkSandbox)"/>, in other words, just after Netick has been started. </para>
            </summary>
            <param name="networkedPrefab">Prefab to enable pooling for.</param>
            <param name="preloadedAmount">How many instances to be preloaded.</param>
            <param name="hideInactiveMembers">Pass true to hide inactive pool members.</param>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.GetPrefab(System.String)">
            <summary>
            Gets a Network Prefab by name.
            <para>Note: this causes GC.</para>
            </summary>
            <param name="name"></param>
            <returns>The Network Prefab</returns>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.NetworkInstantiate(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion,Netick.NetworkPlayer)">
            <summary>
            <i><b>[Server Only]</b></i> Instantiates a network prefab. 
            <para>This must only be called on the server, since only the server can instantiate network prefabs.</para>
            <para>Note: make sure the prefab has been registered. </para> 
            <para>Note: the specified input source will be given to every <see cref="T:Netick.Unity.NetworkObject"/> child of this prefab.</para> 
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.NetworkInstantiate(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion,Netick.NetworkPlayerId)">
            <summary>
            <i><b>[Server Only]</b></i> Instantiates a network prefab. 
            <para>This must only be called on the server, since only the server can instantiate network prefabs.</para>
            <para>Note: make sure the prefab has been registered. </para> 
            <para>Note: the specified input source will be given to every <see cref="T:Netick.Unity.NetworkObject"/> child of this prefab.</para> 
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.NetworkInstantiate``1(``0,UnityEngine.Vector3,UnityEngine.Quaternion,Netick.NetworkPlayer)">
            <summary>
            <i><b>[Server Only]</b></i> Instantiates a network prefab. 
            <para>This must only be called on the server, since only the server can instantiate network prefabs.</para>
            <para>Note: make sure the prefab has been registered. </para> 
            <para>Note: the specified input source will be given to every <see cref="T:Netick.Unity.NetworkObject"/> child of this prefab.</para> 
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.NetworkInstantiate``1(``0,UnityEngine.Vector3,UnityEngine.Quaternion,Netick.NetworkPlayerId)">
            <summary>
            <i><b>[Server Only]</b></i> Instantiates a network prefab. 
            <para>This must only be called on the server, since only the server can instantiate network prefabs.</para>
            <para>Note: make sure the prefab has been registered. </para> 
            <para>Note: the specified input source will be given to every <see cref="T:Netick.Unity.NetworkObject"/> child of this prefab.</para> 
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.Destroy(Netick.Unity.NetworkObject)">
            <summary>
            <i><b>[Server Only]</b></i> Destroys a network object.
            <para>Note: never call this on a child <see cref="T:Netick.Unity.NetworkObject"/> of the original prefab, only the root of the prefab.</para> 
            </summary>
            <param name="obj">The object to destroy.</param>
            <returns></returns>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.FindSandboxOf(UnityEngine.MonoBehaviour)">
            <summary>
            Finds the <see cref="T:Netick.Unity.NetworkSandbox"/> instance associated with the specified <see cref="T:UnityEngine.GameObject"/>.
            Returns null if networking is not running or if no matching sandbox is found for the object's scene.
            </summary>
            <param name="go">The <see cref="T:UnityEngine.GameObject"/> to find the sandbox for.</param>
            <returns>The <see cref="T:Netick.Unity.NetworkSandbox"/> associated with the object's scene, or null if not found.</returns>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.FindSandboxOf(UnityEngine.GameObject)">
            <summary>
            Finds the <see cref="T:Netick.Unity.NetworkSandbox"/> instance associated with the specified <see cref="T:UnityEngine.GameObject"/>.
            Returns null if networking is not running or if no matching sandbox is found for the object's scene.
            </summary>
            <param name="go">The <see cref="T:UnityEngine.GameObject"/> to find the sandbox for.</param>
            <returns>The <see cref="T:Netick.Unity.NetworkSandbox"/> associated with the object's scene, or null if not found.</returns>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.UserObject">
            <summary>
            Use this to associate an object with this sandbox.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.Name">
            <summary>
            Name of this sandbox.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.Engine">
            <summary>
            The NetickEngine instance attached to this sandbox.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.StartMode">
            <summary>
            The mode this sandbox was started in.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.IsRunning">
            <summary>
            Returns true if this <see cref="T:Netick.Unity.NetworkSandbox"/> has been started.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.IsServer">
            <summary>
            Returns true if this <see cref="T:Netick.Unity.NetworkSandbox"/> is the server.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.IsClient">
            <summary>
            Returns true if this <see cref="T:Netick.Unity.NetworkSandbox"/> is a client.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.IsHost">
            <summary>
            Returns true if this <see cref="T:Netick.Unity.NetworkSandbox"/> is a host.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.IsPlayer">
            <summary>
            Returns true if this <see cref="T:Netick.Unity.NetworkSandbox"/> is a player, which is the case when running as a Client, Host, or in Single-Player mode.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.Config">
            <summary>
            Configuration data for Netick.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.Physics2D">
            <summary>
            The <see cref="T:UnityEngine.PhysicsScene2D"/> associated with this <see cref="T:Netick.Unity.NetworkSandbox"/>. Always use this to perform physics queries inside the sandbox instead of <see cref="T:UnityEngine.Physics2D"/>.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.Physics">
            <summary>
            The <see cref="T:UnityEngine.PhysicsScene"/> associated with this <see cref="T:Netick.Unity.NetworkSandbox"/>. Always use this to perform physics queries inside the sandbox instead of <see cref="T:UnityEngine.Physics"/>.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.Scene">
            <summary>
            The <see cref="T:UnityEngine.SceneManagement.Scene"/> associated with this <see cref="T:Netick.Unity.NetworkSandbox"/>.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.PhysicsPrediction">
            <summary>
            Use this to enable/disable Physics Prediction in the client at runtime.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.ServerEndPoint">
            <summary>
            <i><b>[Client Only]</b></i> The <see cref="!:IPEndPoint"/> of the server you are connected to. Returns null if you are not connected to any server, or if you are the server.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.IsConnected">
            <summary>
            <i><b>[Client Only]</b></i> Returns true if this client is currently connected to a server.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.Transport">
            <summary>
            The underlying transport used for low-level networking.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.Players">
            <summary>
            A list containing the ids of all connected players currently. This list is networked and synced to all clients.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.ConnectedServer">
            <summary>
            The server the client is connected to.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.Objects">
            <summary>
            A dictionary containing all simulated/registered network objects [<see cref="T:Netick.Unity.NetworkObject"/>] currently.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.InterestManagement">
            <summary>
            Use this to manages interest groups and area of interest (AoI) layers.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.LocalPlayer">
            <summary>
            The local player of this sandbox instance.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.LocalInterpolation">
            <summary>
            The Local (predicted) Interpolation instance used for interpolating local/predicted objects. Includes useful interpolation data, such as the current interpolation alpha, the ticks being interpolated, and the local interpolation time (in seconds).
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.RemoteInterpolation">
            <summary>
            The Remote Interpolation instance used for interpolating remote objects on the client. Includes useful interpolation data, such as the current interpolation alpha, the ticks being interpolated, the remote interpolation time (in seconds), and the remote interpolation delay (in seconds).
            <para>Note: this is only valid in the client.</para>
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.Timer">
            <summary>
            The simulation clock used for managing time in the network simulation.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.FixedDeltaTime">
            <summary>
            Time period between network simulation steps. Same as <see cref="P:UnityEngine.Time.fixedDeltaTime"/>
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.DeltaTime">
            <summary>
            Time period between frames. Same as <see cref="P:UnityEngine.Time.deltaTime"/>
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.ScaledFixedDeltaTime">
            <summary>
            Scaled time period between network simulation steps. This is the same as <see cref="P:UnityEngine.Time.fixedDeltaTime"/>, but multiplied by <see cref="P:UnityEngine.Time.timeScale"/>.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.NetworkTime">
            <summary>
            Current (local/predicted) network time in seconds. Same as <see cref="P:Netick.LocalInterpolation.Time"/>.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.Tick">
            <summary>
            Current simulation tick. 
            <para>On the server, <b>it's always going forward/increasing.</b></para>
            <para>On the client, <b>during resimulations it returns the current re-simulated tick. </b> To check for resimulations, use <see cref="P:Netick.Unity.NetworkSandbox.IsResimulating"/>.</para>
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.AuthoritativeTick">
            <summary>
            Last received tick on the client. On the server, it returns the same value as <see cref="!:Sandbox.Tick."/>
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.PredictedTick">
            <summary>
            Last predicted tick. 
            <para>On the client, <b>it always returns the predicted tick of the client, regardless of whether it's a resimulation or not.</b></para>
            <para>On the server, <b>it returns the same value as Sandbox.Tick</b></para>
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.IsResimulating">
            <summary>
            Returns true if we are currently re-simulating a previous input/tick of the past. On the server, it always returns false since <b>only the clients resimulate</b>.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.ResimulationCount">
            <summary>
            <i><b>[Client Only]</b></i> The number of re-simulations that have been performed in this tick. This is only valid on the client (and during the re-simulation stage), and it returns 0 on the server.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.ResimulationStep">
            <summary>
            <i><b>[Client Only]</b></i> Returns the current re-simulation step we are currently performing, if we are in the re-simulation stage. This is only valid on the client, and it returns 0 on the server.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.IsFirstNetworkFixedUpdateCall">
            <summary>
            Returns true if this NetworkFixedUpdate call is the first one executed in this frame. This excludes re-simulations, and it only refers to new/forward ticks.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.IsLastNetworkFixedUpdateCall">
            <summary>
            Returns true if this NetworkFixedUpdate call is the last one executed in this frame. This excludes re-simulations, and it only refers to new/forward ticks.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.InKBps">
            <summary>
            Incoming data in kilobytes per second (KBps).
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.OutKBps">
            <summary>
            Outgoing data in kilobytes per second (KBps).
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.InPacketLoss">
            <summary>
            <i><b>[Client Only]</b></i> Estimation of incoming packets that are being lost. Value ranges between 0.0 and 1.0, with 1.0 meaning all packets are being lost.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.OutPacketLoss">
            <summary>
            <i><b>[Client Only]</b></i> Estimation of outgoing packets that are being lost. Value ranges between 0.0 and 1.0, with 1.0 meaning all packets are being lost.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.InterpolationDelay">
            <summary>
            <i><b>[Client Only]</b></i> Remote Interpolation delay in seconds.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.RTT">
            <summary>
            <i><b>[Client Only]</b></i> The round-trip time (RTT) of the client in seconds.
            </summary>  
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.Monitor">
            <summary>
            Used to track network metrics and statistics.
            </summary>
        </member>
        <member name="E:Netick.Unity.NetworkSandbox.PostNetworkFixedUpdate">
            <summary>
            Called after all NetworkFixedUpdate methods have been executed.
            <para>Note: it's called with every resimulation on the client.</para> 
            </summary>
        </member>
        <member name="E:Netick.Unity.NetworkSandbox.PreNetworkFixedUpdate">
            <summary>
            Called before any NetworkFixedUpdate method have been executed.
            <para>Note: it's called with every resimulation on the client.</para> 
            </summary>
        </member>
        <member name="E:Netick.Unity.NetworkSandbox.PostNetworkUpdate">
            <summary>
            Called after all NetworkUpdate methods have been executed.
            </summary>
        </member>
        <member name="E:Netick.Unity.NetworkSandbox.PreNetworkUpdate">
            <summary>
            Called before any NetworkUpdate method have been executed.
            </summary>
        </member>
        <member name="E:Netick.Unity.NetworkSandbox.PostNetworkRender">
            <summary>
            Called after all NetworkRender methods have been executed.
            </summary>
        </member>
        <member name="E:Netick.Unity.NetworkSandbox.PreNetworkRender">
            <summary>
            Called before any NetworkRender method have been executed.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkSandbox.Events">
            <summary>
            Use this to subscribe/unsubscribe to/from Netick events.
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.Connect(System.Int32,System.String,System.Byte[],System.Int32)">
            <summary>
            <i><b>[Client Only]</b></i> Connects to a remote server. 
            <para>Note: if you are already connected to a server, and you want to connect to a different one, you have to disconnect before calling this. Otherwise this method does nothing.</para>
            <para>Note: connectionData array length should not be more than 300 if you are using Netick Transport.</para>
            </summary>
            <param name="ip">IP address of the server.</param>
            <param name="port">Port of the server.</param>
            <param name="connectionData">RawValue sent with the connection request. Could be used to decide whether or not to allow the connection.</param>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.DisconnectFromServer">
            <summary>
            <i><b>[Client Only]</b></i> Disconnects this client from the server.
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.Kick(Netick.NetworkPlayerId)">
            <summary>
            <i><b>[Server Only]</b></i> Disconnects a client from the server.
            </summary>
            <param name="client">The client to be disconnected.</param>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.CreateMatch(System.String)">
            <summary>
            <i><b>[Server Only]</b></i> Creates a match. Only functional if the low-level transport has support for matchmaking.
            </summary>
            <param name="name">Name of the match.</param>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.RefreshMatchList">
            <summary>
            Requests an update to the match list. Only functional if the low-level transport has support for matchmaking.
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.SwitchScene(System.String)">
            <summary>
            <i><b>[Server Only]</b></i> Switches to a different scene. This must be called instead of <see cref="M:UnityEngine.SceneManagement.SceneManager.LoadSceneAsync(System.Int32)"/> or its variations. This should only be called for scenes included in the build of the game.
            </summary>
            <param name="sceneBuildIndex">SceneBuildIndex of the desired scene.</param>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.SwitchScene(System.Int32)">
            <summary>
            <i><b>[Server Only]</b></i> Switches to a different scene. This must be called instead of <see cref="M:UnityEngine.SceneManagement.SceneManager.LoadSceneAsync(System.Int32)"/> or its variations. This should only be called for scenes included in the build of the game.
            </summary>
            <param name="sceneBuildIndex">SceneBuildIndex of the desired scene.</param>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.LoadSceneAsync(System.String,UnityEngine.SceneManagement.LoadSceneMode)">
            <summary>
            <i><b>[Server Only]</b></i>  Loads a scene asynchronously. This should only be called for scenes included in the build of the game.
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkSandbox.UnloadSceneAsync(System.String)">
            <summary>
            <i><b>[Server Only]</b></i>  Unloads a scene asynchronously. 
            </summary>
        </member>
        <member name="T:Netick.Unity.NetworkRigidbody2D">
            <summary>
            This component is used to replicate the position and rotation of an object. Therefore, it’s the same as the Network Transform, the difference is that Network Rigidbody 2D must be used if you want to have client-side prediction over Box2D objects since it replicates several other properties necessary for correct prediction. 
            </summary>
        </member>
        <member name="T:Netick.Unity.NetworkArray`1">
            <summary>
            A networked array.
            </summary>
        </member>
        <member name="T:Netick.Unity.NetworkRigidbody">
            <summary>
            This component is used to replicate the position and rotation of an object. Therefore, it’s the same as the Network Transform, the difference is that Network Rigidbody must be used if you want to have client-side prediction over PhysX objects since it replicates several other properties necessary for correct prediction. 
            </summary>
        </member>
        <member name="T:Netick.Unity.PhysicsSimulationStep">
            <summary>
            Executes the physics (PhysX or Box2D) simulation step during the <c>NetworkFixedUpdate</c> callback of Netick.
            </summary>
        </member>
        <member name="T:Netick.Unity.NetworkAnimator">
            <summary>
            This component is used to replicate Unity's Animator parameters and states. 
            </summary>
        </member>
        <member name="T:Netick.Unity.FloatErrorCorrector">
            <summary>
            Handles prediction error correction smoothing for a float.
            </summary>
        </member>
        <member name="T:Netick.Unity.TransformErrorCorrector">
            <summary>
            Handles prediction error correction smoothing for a transform.
            </summary>
        </member>
        <member name="T:Netick.Unity.Vector3ErrorCorrector">
            <summary>
            Handles prediction error correction smoothing for a Vector3.
            </summary>
        </member>
        <member name="T:Netick.Unity.Vector2ErrorCorrector">
            <summary>
            Handles prediction error correction smoothing for a Vector2.
            </summary>
        </member>
        <member name="T:Netick.Unity.QuaternionErrorCorrector">
            <summary>
            Handles prediction error correction smoothing for a Quaternion.
            </summary>
        </member>
        <member name="T:Netick.Unity.NetworkBehaviourRef`1">
            <summary>
            Represents a network-serializable reference to a <see cref="T:Netick.Unity.NetworkBehaviour"/> of type <typeparamref name="T"/> within the networked simulation.
            This struct stores the object and behaviour ids, allowing retrieval of the referenced behaviour from a <see cref="T:Netick.Unity.NetworkSandbox"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:Netick.Unity.NetworkBehaviour"/> being referenced.</typeparam>
        </member>
        <member name="T:Netick.Unity.NetworkObjectRef">
            <summary>
            Represents a network-serializable reference to a <see cref="T:Netick.Unity.NetworkObject"/> within the networked simulation.
            This struct stores the object network id, allowing retrieval of the referenced object from a <see cref="T:Netick.Unity.NetworkSandbox"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:Netick.Unity.NetworkBehaviour"/> being referenced.</typeparam>
        </member>
        <member name="T:Netick.Unity.NetworkTransform">
            <summary>
            This component is used to replicate the position and rotation of an object.  
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkTransform.Teleport(UnityEngine.Vector3)">
            <summary>
            Instantly moves the object. By calling this method, the object won't be interpolated for one tick.
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:Netick.Unity.NetworkTransform.Teleport(UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Instantly moves the object. By calling this method, the object won't be interpolated for one tick.
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:Netick.Unity.NetworkTransform.Teleport(UnityEngine.Quaternion)">
            <summary>
            Instantly moves the object. By calling this method, the object won't be interpolated for one tick.
            </summary>
            <param name="position"></param>
        </member>
        <member name="T:Netick.Unity.SingleInstanceEnforcer">
            <summary>
            Add this component to a GameObject to ensure only a single instance of it will exist at the same time, across all sandboxes.
            </summary>
        </member>
        <member name="T:Netick.Unity.StartMode">
            <summary>
            Defines the start modes for Netick, which determine how the network is initialized.
            </summary>
        </member>
        <member name="T:Netick.Unity.Network">
            <summary>
            Manages Netick and its sandboxes, and is used to start and shut down Netick.
            </summary>
        </member>
        <member name="F:Netick.Unity.Network.Version">
            <summary>
            The version of Netick.
            </summary>
        </member>
        <member name="P:Netick.Unity.Network.StartMode">
            <summary>
            The start mode of Netick.
            </summary>
        </member>
        <member name="P:Netick.Unity.Network.IsRunning">
            <summary>
            Returns true if Netick is running, false otherwise.
            </summary>
        </member>
        <member name="P:Netick.Unity.Network.Sandboxes">
            <summary>
            Returns the list of all sandboxes currently running in Netick.
            </summary>
        </member>
        <member name="P:Netick.Unity.Network.Instance">
            <summary>
            Returns the singleton instance of the Network class, which manages Netick.
            </summary>
        </member>
        <member name="P:Netick.Unity.Network.Config">
            <summary>
            Returns the configuration (of the first sandbox) used by Netick.
            </summary>
        </member>
        <member name="P:Netick.Unity.Network.IsHeadless">
            <summary>
            Returns true if Netick is running in headless mode (batch mode), false otherwise.
            </summary>
        </member>
        <member name="M:Netick.Unity.Network.Init(Netick.Unity.NetickConfig)">
            <summary>
            Initializes Netick. This is automatically called when you start Netick. 
            <para>If you don't provide a <see cref="T:Netick.Unity.NetickConfig"/>, Netick will use the default config, which can be modified/found in (Netick -> Settings).</para>
            </summary>
        </member>
        <member name="M:Netick.Unity.Network.Shutdown(System.Boolean)">
            <summary>
            Shuts down Netick and destroys all sandboxes. The shutdown will occur in the next frame. For immediate shutdown, use: <see cref="M:Netick.Unity.Network.ShutdownImmediately(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Netick.Unity.Network.ShutdownImmediately(System.Boolean)">
            <summary>
            Shuts down Netick and destroys all sandboxes immediately.
            </summary>
        </member>
        <member name="M:Netick.Unity.Network.ShutdownSandbox(Netick.Unity.NetworkSandbox,System.Boolean)">
            <summary>
            Shuts down a specific sandbox.
            </summary>
            <param name="sandbox">The sandbox to shut down.</param>
        </member>
        <member name="M:Netick.Unity.Network.Focus(Netick.Unity.NetworkSandbox)">
            <summary>
            Focus on a specific sandbox.
            </summary>
            <param name="sandbox">The sandbox to focus on.</param>
        </member>
        <member name="M:Netick.Unity.Network.StartAsServerAndClient(Netick.Unity.NetworkTransportProvider,System.Int32,UnityEngine.GameObject,System.Int32)">
            <summary>
            Starts both a client (or clients) and a server.
            </summary>
            <param name="serverPort">Network port.</param>
            <param name="numOfClients">Number of client sandboxes to create.</param>
            <returns></returns>
        </member>
        <member name="M:Netick.Unity.Network.StartAsMultiplePeers(Netick.Unity.NetworkTransportProvider,System.Int32,UnityEngine.GameObject,System.Boolean,System.Boolean,System.Int32,Netick.Unity.NetickConfig)">
            <summary>
            Starts multiple peers together.
            </summary>
            <param name="serverPort">Network port.</param>
            <param name="numOfClients">Number of clients to create.</param>
            <param name="startAServer">Should we start a server too.</param>
            <returns></returns>
        </member>
        <member name="M:Netick.Unity.Network.StartAsClient(Netick.Unity.NetworkTransportProvider,UnityEngine.GameObject,Netick.Unity.NetickConfig)">
            <summary>
            Starts Netick as a client.
            </summary>
            <returns>The sandbox representing the client</returns>
        </member>
        <member name="M:Netick.Unity.Network.StartAsClient(Netick.Unity.NetworkTransportProvider,System.Int32,UnityEngine.GameObject,Netick.Unity.NetickConfig)">
            <summary>
            Starts Netick as a client.
            </summary>
            <returns>The sandbox representing the client</returns>
        </member>
        <member name="M:Netick.Unity.Network.StartAsSinglePlayer(UnityEngine.GameObject,Netick.Unity.NetickConfig)">
            <summary>
            Starts Netick in single player mode.
            </summary>
            <returns>The sandbox representing the server</returns>
        </member>
        <member name="M:Netick.Unity.Network.StartAsHost(Netick.Unity.NetworkTransportProvider,System.Int32,UnityEngine.GameObject,Netick.Unity.NetickConfig)">
            <summary>
            Starts Netick as a host.
            </summary>
            <param name="port">Network port.</param>
            <returns>The sandbox representing the server</returns>
        </member>
        <member name="M:Netick.Unity.Network.StartAsServer(Netick.Unity.NetworkTransportProvider,System.Int32,UnityEngine.GameObject,Netick.Unity.NetickConfig)">
            <summary>
            Starts Netick as a server.
            </summary>
            <param name="port">Network port.</param>
            <returns>The sandbox representing the server</returns>
        </member>
        <member name="P:Netick.Unity.NetickBehaviour.Sandbox">
            <summary>
            The <see cref="T:Netick.Unity.NetworkSandbox"/> containing this <see cref="P:Netick.Unity.NetickBehaviour.Object"/>.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetickBehaviour.Object">
            <summary>
            The <see cref="T:Netick.Unity.NetworkObject"/> this behaviour is attached to.
            </summary>
        </member>
        <member name="M:Netick.Unity.NetickBehaviour.NetworkStart">
            <summary>
            Called when this behaviour has been added to the simulation. 
            </summary>
        </member>
        <member name="M:Netick.Unity.NetickBehaviour.NetworkDestroy">
            <summary>
            Called when this behaviour has been removed from the simulation.
            </summary>
        </member>
        <member name="M:Netick.Unity.NetickBehaviour.NetworkUpdate">
            <summary>
            Called every frame. Executed before NetworkFixedUpdate.
            </summary>
        </member>
        <member name="M:Netick.Unity.NetickBehaviour.NetworkFixedUpdate">
            <summary>
            Called every fixed-time network step. Any changes to the networked state should happen here.
            <para>On the client, if you are the Input Source or if this Object.PredictionMode is set to Everyone, it will be called several times in one update/tick during resimulations. To check for resimulations, use [<see cref="!:IsResimulating"/>].</para> 
            </summary>
        </member>
        <member name="M:Netick.Unity.NetickBehaviour.NetworkRender">
             <summary>
             Called every frame. Executed after NetworkUpdate and NetworkFixedUpdate.
             </summary>
            <para>IMPORTANT NOTE: properties (which can be interpolated) marked with [<see cref="T:Netick.Smooth"/>] attribute will return interpolated values when accessed in this method.</para>
        </member>
        <member name="T:Netick.Unity.NetworkBehaviour">
            <summary>
            Base class for all networked behaviors in Netick.
            Inherit from this class to create custom network-synchronized logic.
            Provides access to network state, input, and misc utility methods.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkBehaviour.BehaviourId">
            <summary>
            The network id of this <see cref="T:Netick.Unity.NetworkBehaviour"/>.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkBehaviour.Id">
            <summary>
            The network id of this <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkBehaviour.IsClient">
            <summary>
            Returns true if this <see cref="T:Netick.Unity.NetworkSandbox"/> is a client.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkBehaviour.IsServer">
            <summary>
            Returns true if this <see cref="T:Netick.Unity.NetworkSandbox"/> is the server.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkBehaviour.IsOwner">
            <summary>
            Returns true if this <see cref="T:Netick.Unity.NetworkSandbox"/> is the owner of this Object. In this version of Netick: Server=Owner.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkBehaviour.IsHost">
            <summary>
            Returns true if this <see cref="T:Netick.Unity.NetworkSandbox"/> is the host.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkBehaviour.IsPlayer">
            <summary>
            Returns true if this <see cref="T:Netick.Unity.NetworkSandbox"/> is a client or the host.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkBehaviour.IsInputSource">
            <summary>
            Returns true if this <see cref="P:Netick.Unity.NetworkSandbox.LocalPlayer"/> is providing inputs to this Object.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkBehaviour.IsProxy">
            <summary>
            Returns true if we neither provide inputs nor own this <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkBehaviour.IsResimulating">
            <summary>
            Returns true if we are currently resimulating a previous input of the past. On the server, it always returns false since <b>only the clients resimulate</b>.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkBehaviour.IsPredicted">
            <summary>
            On the client  returns true only if the client is predicting this object. On the server, always returns true.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkBehaviour.IsInterested">
            <summary>
            On the client, returns true if this client is interested in this object. On the server, always returns true.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkBehaviour.InputSource">
            <summary>
            Returns the source <see cref="T:Netick.NetworkPlayer"/> (<see cref="T:Netick.NetworkPeer"/>/<see cref="T:Netick.ServerConnection"/>) of inputs for this <see cref="T:Netick.Unity.NetworkObject"/>. If the source of inputs is remote (from a client) it returns that <see cref="T:Netick.ServerConnection"/>, while on the
            input source itself it returns the local <see cref="T:Netick.NetworkPlayer"/>.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkBehaviour.InputSourcePlayerId">
            <summary>
            Returns the NetworkPlayerId of the input source of this object. This is synced to every client.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkBehaviour.StateSize">
            <summary>
            Returns the networked state size of this behavior in bytes.
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkBehaviour.CopyStateTo(System.Byte*)">
            <summary>
            Copies the state of this behavior into target.
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkBehaviour.CopyStateTo(System.Byte[])">
            <summary>
            Copies the state of this behavior into target.
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkBehaviour.SetStateFrom(System.Byte*,System.Boolean)">
            <summary>
            Sets the state of this behavior. Ignores InputSource Relevancy.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Netick.Unity.NetworkBehaviour.SetStateFrom(System.Byte[],System.Boolean)">
            <summary>
            Sets the state of this behavior. Ignores InputSource Relevancy.
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkBehaviour.ClearState(System.Boolean)">
            <summary>
            Zeros out the networked state memory of this behavior. Ignores InputSource Relevancy.
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkBehaviour.FetchInput``1(``0@,System.Int32)">
            <summary>
            Fetches a network input for this tick. Returns false if no input source is currently providing inputs to this Object, or when input loss occurs (in case of a remote input source).
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkBehaviour.FetchInput``1(``0@,System.Boolean@,System.Int32)">
            <summary>
            Fetches a network input for this tick. Returns false if no input source is currently providing inputs to this Object, or when input loss occurs (in case of a remote input source).
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkBehaviour.OnBecameInterested">
            <summary>
            Called in the client when the client becomes interested in this object.
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkBehaviour.OnBecameUninterested">
            <summary>
            Called in the client when the client becomes uninterested in this object.
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkBehaviour.OnInputSourceChanged(Netick.NetworkPlayer)">
            <summary>
            Called in the server (or the client if it is the input source) when the input source of this Object has changed.
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkBehaviour.OnInputSourceLeft">
            <summary>
            Called on the server when the input source of this Object has disconnected.
            </summary>
        </member>
        <member name="T:Netick.Unity.NetickConfig">
            <summary>
            Config class for Netick.
            </summary> 
        </member>
        <member name="T:Netick.Unity.NetworkObject">
            <summary>
            Any GameObject which needs to be synced/replicated must have a Network Object component. It’s the component that tells Netick a GameObject is networked. Although not every child GameObject needs it, only the root has to have a Network Object.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkObject.Sandbox">
            <summary>
            The <see cref="T:Netick.Unity.NetworkSandbox"/> this <see cref="T:Netick.Unity.NetworkObject"/> belongs to.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkObject.Engine">
            <summary>
            The <see cref="T:Netick.NetickEngine"/> this <see cref="T:Netick.Unity.NetworkObject"/> belongs to.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkObject.Entity">
            <summary>
            The <see cref="T:Netick.Entity"/> this <see cref="T:Netick.Unity.NetworkObject"/> represents in the Netick simulation.
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkObject.GetRef">
            <summary>
            Returns a network-serializable reference to this <see cref="T:Netick.Unity.NetworkObject"/>. This is used to get a networkable identifier for this object, which can be used for RPCs or network properties.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Netick.Unity.NetworkObject.Id">
            <summary>
            Returns the unique identifier of this <see cref="T:Netick.Unity.NetworkObject"/> in the Netick simulation. This id is assigned by the Netick when the object is added to the simulation and is used to identify the object across the network.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkObject.SpawnTick">
            <summary>
            Returns the tick at which this <see cref="T:Netick.Unity.NetworkObject"/> was spawned locally. This is a local value, and is not synced.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkObject.HasValidId">
            <summary>
            Returns true if this <see cref="T:Netick.Unity.NetworkObject"/> has been added to the simulation by Netick, and thus has a valid id.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkObject.IsMarkedForDestruction">
            <summary>
            <i><b>[Server Only]</b></i> Returns true if <see cref="M:Netick.Unity.NetworkSandbox.Destroy(Netick.Unity.NetworkObject)"/> has been called on this object in the server, and the object is scheduled to be removed from the simulation (destroyed) at the end of the current tick.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkObject.NetworkedBehaviours">
            <summary>
            Returns the <see cref="T:Netick.Unity.NetworkBehaviour"/> components attached to this <see cref="T:Netick.Unity.NetworkObject"/>. 
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkObject.NetickBehaviours">
            <summary>
            Returns the <see cref="T:Netick.Unity.NetickBehaviour"/> components attached to this <see cref="T:Netick.Unity.NetworkObject"/>. 
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkObject.Parent">
            <summary>
            The <see cref="T:Netick.Unity.NetworkObject"/> parent of this object.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkObject.IsSceneObject">
            <summary>
            Returns true if this <see cref="T:Netick.Unity.NetworkObject"/> is a scene object (not a prefab instance). Scene objects are objects that are part of the scene and not instantiated from a prefab.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkObject.IsPrefabObject">
            <summary>
            Returns true if this <see cref="T:Netick.Unity.NetworkObject"/> is a prefab object (not a scene object). Prefab objects are objects that are instantiated from a prefab and not part of the scene.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkObject.PrefabId">
            <summary>
            Returns the prefab id of this <see cref="T:Netick.Unity.NetworkObject"/>. This is used to identify the prefab from which this object was instantiated. If this object is a scene object, it returns -1.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkObject.SceneId">
            <summary>
            Returns the scene id of this <see cref="T:Netick.Unity.NetworkObject"/>. This value is only unique per-scene, and not per the entire game.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkObject.RuntimeSceneId">
            <summary>
            Returns the runtime scene id of this <see cref="T:Netick.Unity.NetworkObject"/>. This value is only unique per-scene, and not per the entire game.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkObject.IsClient">
            <summary>
            Returns true if this <see cref="T:Netick.Unity.NetworkSandbox"/> is a client.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkObject.IsServer">
            <summary>
            Returns true if this <see cref="T:Netick.Unity.NetworkSandbox"/> is the server.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkObject.IsOwner">
            <summary>
            Returns true if this <see cref="T:Netick.Unity.NetworkSandbox"/> is the owner of this Object. In this version of Netick: Server=Owner.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkObject.IsInputSource">
            <summary>
            Returns true if this <see cref="P:Netick.Unity.NetworkSandbox.LocalPlayer"/> is providing inputs for this <see cref="T:Netick.Unity.NetworkObject"/>.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkObject.IsProxy">
            <summary>
            Returns true if we neither provide inputs nor own this <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkObject.IsResimulating">
            <summary>
            Returns true if we are currently resimulating a previous input of the past. On the server, it always returns false since <b>only the clients resimulate</b>.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkObject.InputSource">
            <summary>
            Returns the source <see cref="T:Netick.NetworkPlayer"/> (<see cref="T:Netick.NetworkPeer"/>/<see cref="T:Netick.ServerConnection"/>) of inputs for this <see cref="T:Netick.Unity.NetworkObject"/>. If the source of inputs is remote (from a client) it returns that <see cref="T:Netick.ServerConnection"/>, while on the
            input source itself it returns the local <see cref="T:Netick.NetworkPlayer"/>.
            <para>Use <see cref="P:Netick.Unity.NetworkObject.InputSourcePlayerId"/> for the synced-to-everyone player id of the Input Source - because <see cref="P:Netick.Unity.NetworkObject.InputSource"/> is only valid in the client for objects the client itself is the input source of, and it's null for everything else.</para>
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkObject.InputSourcePlayerId">
            <summary>
            Returns the NetworkPlayerId of the input source of this object. This is synced to every client.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkObject.IsInterested">
            <summary>
            <i><b>[Client Only]</b></i> On the client, returns true if this client is interested in this object. On the server, always returns true.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkObject.InterestGroup">
            <summary>
            The interest group of this object. This can only be changed if BroadPhaseFilter is set to Custom.
            </summary>
        </member>
        <member name="P:Netick.Unity.NetworkObject.StateSize">
            <summary>
            Returns the networked state size of this object in bytes.
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkObject.ClearState(System.Boolean)">
            <summary>
            Zeros out the networked state memory of this object. Ignores InputSource Relevancy.
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkObject.CopyStateTo(System.Byte*)">
            <summary>
            Copies the state of this object into target.
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkObject.CopyStateTo(System.Byte[])">
            <summary>
            Copies the state of this object into target.
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkObject.SetStateFrom(System.Byte*,System.Boolean)">
            <summary>
            Sets the state of this object. Ignores InputSource Relevancy.
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkObject.SetStateFrom(System.Byte[],System.Boolean)">
            <summary>
            Sets the state of this object. Ignores InputSource Relevancy.
            </summary>
        </member>
        <member name="M:Netick.Unity.NetworkObject.SetParent(Netick.Unity.NetworkObject)">
            <summary>
            <i><b>[Owner/InputSource Only]</b></i> Changes the parent of this object.
            </summary>
            <param name="obj">The object which will become the parent of this object.</param>
        </member>
    </members>
</doc>
